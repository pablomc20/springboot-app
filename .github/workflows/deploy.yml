name: Build and Deploy Spring Boot App to ECS

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: springboot-app
  ECS_CLUSTER: springboot-cluster
  ECS_SERVICE: springboot-ecs-alb-ECSService-pxajwufgmBdd
  TASK_FAMILY: springboot-ecs-alb-TaskDefinition-qzTiUqUFbDMs
  CONTAINER_NAME: springboot-container

jobs:
  deploy:
    name: Build, Test, Scan and Deploy to ECS
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Make Maven Wrapper Executable
        run: chmod +x ./mvnw

      - name: Run Tests and Verify
        run: ./mvnw clean verify

      - name: Run SonarQube Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          ./mvnw sonar:sonar \
            -Dsonar.projectKey=springboot-app \
            -Dsonar.projectName="Spring Boot App" \
            -Dsonar.host.url=https://sonarqube.hlsgroup.com.mx \
            -Dsonar.login=$SONAR_TOKEN

      - name: Check SonarQube Quality Gate
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          echo "Waiting for SonarQube Quality Gate result..."
          for i in {1..6}; do
            STATUS=$(curl -s -u $SONAR_TOKEN: \
              "https://sonarqube.hlsgroup.com.mx/api/qualitygates/project_status?projectKey=springboot-app" \
              | jq -r '.projectStatus.status')

            echo "Attempt $i - Quality Gate Status: $STATUS"

            if [[ "$STATUS" == "OK" ]]; then
              echo "✅ Quality Gate passed!"
              exit 0
            elif [[ "$STATUS" == "ERROR" ]]; then
              echo "❌ Quality Gate failed!"
              exit 1
            fi

            echo "⏳ Status not ready yet. Waiting 5 seconds..."
            sleep 5
          done

          echo "⚠️ Quality Gate status not received after waiting. Failing build."
          exit 1
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::873153257366:role/GitHubActionsOIDC
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set image tag based on commit SHA
        run: echo "IMAGE_TAG=${GITHUB_SHA}" >> $GITHUB_ENV

      - name: Build Docker image
        run: |
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REPOSITORY:$IMAGE_TAG ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Push image to ECR
        run: |
          docker push ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Get current task definition
        id: get-task-def
        run: |
          aws ecs describe-task-definition \
            --task-definition $TASK_FAMILY \
            --query "taskDefinition" > task-def.json

      - name: Create new task definition revision with updated image
        id: register-task-def
        run: |
          export IMAGE_URI="${{ steps.login-ecr.outputs.registry }}/${ECR_REPOSITORY}:${IMAGE_TAG}"
          jq \
            '. | .containerDefinitions[0].image = env.IMAGE_URI
             | del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredBy, .registeredAt)' \
            task-def.json > new-task-def.json

          aws ecs register-task-definition \
            --cli-input-json file://new-task-def.json > task-def-out.json

      - name: Update ECS service with new task definition
        run: |
          NEW_REVISION=$(jq -r '.taskDefinition.taskDefinitionArn' task-def-out.json)
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --task-definition $NEW_REVISION \
            --region $AWS_REGION
